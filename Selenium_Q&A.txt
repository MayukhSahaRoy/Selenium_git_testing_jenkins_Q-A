1. What is selenium?
A. Selenium is a powerful tool for controlling web browsers through programs. It is functional 
   for all browsers, works on all major OS, and its scripts are written in various languages 
   i.e., Python, Java, C#, etc.

2. Components of Selenium.
A. The components of selenium are:
   a. Selenium IDE
   b. Selenium RC(Remote Control)
   c. Selenium WebDriver
   d. Selenium GRID

3. Features of Selenium.
A. The features of selenium are:
   a. Open Source and Portable
   b. Combination of tool and DSL
   c. Easier to understand and implement
   d. Reduce test execution time
   e. Lesser resources required
   f. Supports Multiple Programming Languages
   g. Supports Multiple Operating Systems
   h. Supports Multiple Browsers
   i. Parallel Test Execution

4. Selenium Python Installation.
A. Open Terminal/Cmd and Write Command as 
   python -m pip install selenium

5. Locating Strategies.
A. Locators Strategies in Selenium Python are methods that are used to locate elements
   from the page and perform an operation on the same.
   
   Strategies for locating Single Elemnets are:
   a. By.ID
   b. By.NAME
   c. By.XPATH
   d. By.LINK_TEXT
   e. By.PARTIAL_LINK_TEXT
   f. By.TAG_NAME
   g. By.CLASS_NAME
   h. By.CSS_SELECTOR
   
   Strategies for locating multiple elements are:
   a. find_elements(By.NAME, “name”)
   b. find_elements(By.XPATH, “xpath”)
   c. find_elements(By.LINK_TEXT, “link text”)
   d. find_elements(By.PARTIAL_LINK_TEXT, “partial link text”)
   e. find_elements(By.TAG_NAME, “tag name”)
   f. find_elements(By.CLASS_NAME, “class name”)
   g. find_elements(By.CSS_SELECTOR, “css selector”)

6. How to create Selenium WebDriver in python and webdriver methods?
A. To create object of WebDriver, import WebDriver class from docs and create a object
   based on different Web Browser and Capabilities. After this one can use this object
   to perform all the operations of Webdriver.
   Example:
   # import webdriver 
   from selenium import webdriver   
   # create webdriver object 
   driver = webdriver.Firefox()
   
   The following are the various webdriver methods:
   a. add_cookie - Adds a cookie to your current session.
   b. back - Goes one step backward in the browser history.
   c. close - Closes the current window.
   d. create_web_element - Creates a web element with the specified element_id.
   e. delete_all_cookies - Delete all cookies in the scope of the session.
   f. delete_cookie - Deletes a single cookie with the given name.
   g. execute_async_script - Asynchronously Executes JavaScript in the current
      window/frame.
   h. execute_script - Synchronously Executes JavaScript in the current window/frame.
   i. forward - Goes one step forward in the browser history.
   j. fullscreen_window - Invokes the window manager-specific ‘full screen’ operation.
   k. get_cookie - Get a single cookie by name. Returns the cookie if found, None if
      not.
   l. get_cookies - Returns a set of dictionaries, corresponding to cookies visible
      in the current session.
   m. get_log - Gets the log for a given log type.
   n. get_screenshot_as_base64 - Gets the screenshot of the current window as a
      base64 encoded string which is useful in embedded images in HTML.
   o. get_screenshot_as_file - Saves a screenshot of the current window to a PNG
      image file.
   p. get_screenshot_as_png - Gets the screenshot of the current window as a binary
      data.
   q. get_window_position - Gets the x, y position of the current window.
   r. get_window_rect - Gets the x, y coordinates of the window as well as height
      and width of the current window.
   s. get_window_size - Gets the width and height of the current window.
   t. implicitly_wait - Sets a sticky timeout to implicitly wait for an element to
      be found.
   u. maximize_window - Maximizes the current window that webdriver is using.
   v. minimize_window - Invokes the window manager-specific ‘minimize’ operation.
   x. quit - Quits the driver and closes every associated window.
   y. refresh - Refreshes the current page.
   z. set_page_load_timeout - Set the amount of time to wait for a page load to
      complete before throwing an error.
   a. set_script_timeout - Set the amount of time that the script should wait
      during an execute_async_script call before throwing an error.
   b. set_window_position - Sets the x, y position of the current window.
      (window.moveTo)
   c. set_window_rect - Sets the x, y coordinates of the window as well as height
      and width of the current window.
   d. current_url - Gets the URL of the current page.
   e. current_window_handle - Returns the handle of the current window.
   f. page_source - Gets the source of the current page.
   g. title - Returns the title of the current page.

7. Selenium WebElement and its methods.
A. An element can be a tag, property, or anything, it is an instance of class
   selenium.webdriver.remote.webelement.WebElement. After you find an element on screen
   using selenium, you might want to click it or find sub-elements, etc.
   Selenium provides methods around this WebElement of Selenium.
   The following are the WebElement methods:
   a. is_selected() - is_selected method is used to check if element is selected or
      not. It returns a boolean value True or False.
   b. is_displayed() - is_displayed method is used to check if element it visible to
      user or not. It returns a boolean value True or False.
   c. is_enabled() - is_enabled method is used to check if element is enabled or not.
      It returns a boolean value True or False.
   d. get_property() - get_property method is used to get properties of an element,
      such as getting text_length property of anchor tag.
   e. get_attribute() - get_attribute method is used to get attributes of an element,
      such as getting href attribute of anchor tag.
   f. send_keys() - send_keys method is used to send text to any field, such as input
      field of a form or even to anchor tag paragraph, etc.
   g. click() - click method is used to click on any element, such as an anchor tag,
      a link, etc.
   h. clear() - clear method is used to clear text of any field, such as input field
      of a form or even to anchor tag paragraph, etc.
   i. screenshot() - screenshot method is used to save a screenshot of current element
      to a PNG file.
   j. submit() - submit method is used to submit a form after you have sent data to a
      form.
   k. value_of_css_property() - value_of_css_property method is used to get value of
      a css property for a element.
   l. location - location method is used to get location of element in renderable
      canvas.
   m. screenshot_as_png - screenshot_as_png method is used to gets the screenshot of
      the current element as binary data.
   n. parent - parent method is used to get internal reference to the WebDriver
      instance this element was found from.
   o. size - size method is used to get size of current element.
   p. tag_name - tag_name method is used to get name of tag you are referring to.
   q. text - text method is used to get text of current element.
   r. rect - rect method is used to get a dictionary with the size and location of
      the element.
   s. screenshot_as_base64 - screenshot_as_base64 method is used to gets the screenshot
      of the current element as a base64 encoded string.

8. Action Chains --> Basic methods(move_to_element, click, send_keys)
A. ActionChains are a way to automate low-level interactions such as mouse movements,
   mouse button actions, keypress, and context menu interactions. This is useful for
   doing more complex actions like hover over and drag and drop. Action chain methods
   are used by advanced scripts where we need to drag an element, click an element.   
   ActionChains are implemented with the help of a action chain object which stores
   the actions in a queue and when perform() is called, performs the queued operations.
   
   To create an ActionChain object :
   # import webdriver 
   from selenium import webdriver    
   # import Action chains  
   from selenium.webdriver.common.action_chains import ActionChains    
   # create webdriver object 
   driver = webdriver.Firefox()    
   # create action chain object 
   action = ActionChains(driver)

   Methods for ActionChain are:
   a. click - Clicks an element.
   b. click_and_hold - Holds down the left mouse button on an element.
   c. context_click - Performs a context-click (right click) on an element.
   d. double_click - Double-clicks an element.
   e. drag_and_drop - Holds down the left mouse button on the source element, then
      moves to the target element and releases the mouse button.
   f. drag_and_drop_by_offset - Holds down the left mouse button on the source element,
      then moves to the target offset and releases the mouse button.
   g. key_down - Sends a key press only, without releasing it.
   h. key_up - Releases a modifier key.
   i. move_by_offset - Moving the mouse to an offset from current mouse position.
   j. move_to_element - Moving the mouse to the middle of an element.
   k. move_to_element_with_offset - Move the mouse by an offset of the specified
      element, Offsets are relative to the top-left corner of the element.
   l. perform - Performs all stored actions.
   m. pause - Pause all inputs for the specified duration in seconds.
   n. release - Releasing a held mouse button on an element.
   o. reset_actions - Clears actions that are already stored locally and on the remote end.
   p. send_keys - Sends keys to current focused element.

9. Waits --> Explicit wait and implicit wait.
A. Explicit wait - An explicit wait is a code you define to wait for a certain
   condition to occur before proceeding further in the code. The extreme case of
   this is time.sleep(), which sets the condition to an exact time period to wait.
   There are some convenience methods provided that help you write code that will
   wait only as long as required. Explicit waits are achieved by using webdriverWait
   class in combination with expected_conditions.
   There are some common conditions that are frequently of use when automating web
   browsers which are as follows:
   a. title_is
   b. title_contains
   c. presence_of_element_located
   d. visibility_of_element_located
   e. visibility_of
   f. presence_of_all_elements_located
   g. element_located_to_be_selected
   h. element_selection_state_to_be
   i. element_located_selection_state_to_be
   j. alert_is_present
   
   Example of using explicit split.
   # import webdriver  
   from selenium import webdriver  
   from selenium.webdriver.common.by import By 
   from selenium.webdriver.support.ui import WebDriverWait 
   from selenium.webdriver.support import expected_conditions as EC 
  
   # create webdriver object  
   driver = webdriver.Firefox()      
   # get geeksforgeeks.org  
   driver.get("https://www.geeksforgeeks.org/")      
   # get element  after explicitly waiting for 10 seconds 
   element = WebDriverWait(driver, 10).until( 
             EC.presence_of_element_located((By.link_text, "Courses")) 
       ) 
   # click the element  
   element.click()
   
   Here the WebDriverWait by default calls the ExpectedCondition every 500
   milliseconds until it returns successfully.
   
   Implicit wait - An implicit wait tells WebDriver to poll the DOM for a certain
   amount of time when trying to find any element (or elements) not immediately
   available. The default setting is 0. Once set, the implicit wait is set for the
   life of the WebDriver object.
   Implicit wait as defined would be the set using implicitly_wait method of driver.
   Example:
   # import webdriver  
   from selenium import webdriver  
  
   # create webdriver object  
   driver = webdriver.Firefox()  
   # set implicit wait time 
   driver.implicitly_wait(10) # seconds 
   # get geeksforgeeks.org  
   driver.get("https://www.geeksforgeeks.org/")  
   # get element after 10 seconds 
   element = driver.find_element_by_link_text("Courses") 
   # click element 
   element.click() 

10. Limitations of selenium.
A. The limitations of selenium are:
   a. No support for desktop applications
   b. Expertise
   c. Maintenance and Scalability
   d. Open Source Forums
   e. No support for REST and SOAP platforms
   f. No Reporting capability
   g. Image Testing
